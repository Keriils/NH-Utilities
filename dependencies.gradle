
dependencies {

    api('com.github.GTNewHorizons:Baubles:1.0.4:dev')
    // Todo late... api('com.github.GTNewHorizons:Baubles-Expanded:2.0.3:dev')
    api('com.github.GTNewHorizons:NewHorizonsCoreMod:2.6.88:dev')
    api('com.github.GTNewHorizons:GT5-Unofficial:5.09.50.103:dev')
    api('com.github.GTNewHorizons:EnderIO:2.8.22:dev') { transitive = false }
    api('com.github.GTNewHorizons:EnderCore:0.4.6:dev') { transitive = false }
    api('com.github.GTNewHorizons:BrandonsCore:1.2.0-GTNH:dev') { transitive = false }
    api('com.github.GTNewHorizons:Draconic-Evolution:1.3.14-GTNH:dev') { transitive = false }
    api('com.github.GTNewHorizons:ae2stuff:0.8.5-GTNH:dev')
    api('com.github.GTNewHorizons:Botania:1.11.6-GTNH:dev') { transitive = false }
    api('com.github.GTNewHorizons:Avaritia:1.56:dev') { transitive = false }
    api('com.github.GTNewHorizons:SpiceOfLife:2.1.12-carrot:dev') { transitive = false }
    api('com.github.GTNewHorizons:AppleCore:3.3.4:dev') { transitive = false }

    implementation('com.github.GTNewHorizons:Avaritiaddons:1.8.4-GTNH:dev')
    implementation('com.github.GTNewHorizons:Eternal-Singularity:1.2.1:dev')
    implementation('com.github.GTNewHorizons:Universal-Singularities:8.8.0:dev')
    implementation(rfg.deobf('curse.maven:extra-utilities-225561:2264384'))
    implementation('com.github.GTNewHorizons:worldedit-gtnh:v0.0.7:dev') { transitive = false }
    implementation('com.github.GTNewHorizons:Jabba:1.4.6:dev') { transitive = false }
    implementation('com.github.GTNewHorizons:ThaumicTinkerer:2.10.2:dev')
    implementation('com.github.GTNewHorizons:WarpTheory:1.4.3-GTNH:dev')
    implementation('com.github.GTNewHorizons:Mobs-Info:0.5.0-GTNH:dev')

    // debug info & nbtEdit
    runtimeOnlyNonPublishable fileTree(dir: 'libs', include: ['*.jar'])
    runtimeOnlyNonPublishable('com.github.GTNewHorizons:ServerUtilities:2.0.88:dev') { transitive = false }
    runtimeOnlyNonPublishable('com.github.GTNewHorizons:Angelica:1.0.0-beta28:dev') { transitive = false }
    runtimeOnlyNonPublishable('com.github.GTNewHorizons:BlockRenderer6343:1.2.16:dev') { transitive = false }

}



/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */
